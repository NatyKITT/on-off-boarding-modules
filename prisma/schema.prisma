generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  HR
  IT
  ADMIN
}

enum OnboardingStatus {
  NEW
  IN_PROGRESS
  COMPLETED
}

enum OffboardingStatus {
  NEW
  IN_PROGRESS
  COMPLETED
}

enum MailJobType {
  EMPLOYEE_INFO
  MONTHLY_SUMMARY // měsíční shrnutí
  PROBATION_WARNING // 10 dní před koncem zkušební doby
  PROBATION_REMINDER // Připomínka zaměstnanci
  PROBATION_ENDING // Poslední den zkušební doby
  NOTICE_WARNING // Připomínka výpovědní lhůty
  NOTICE_ENDING // Konec výpovědní lhůty
  MANUAL_EMAIL // Ručně odeslaný email
  SYSTEM_NOTIFICATION // Systémové notifikace
}

enum MailJobStatus {
  QUEUED
  PROCESSING
  SENT
  FAILED
  CANCELLED
}

enum ActionType {
  CREATED
  UPDATED
  DELETED
  RESTORED
  MAIL_SENT
  MAIL_ENQUEUED
  MAIL_FAILED
  STATUS_CHANGED
  PROBATION_REMINDER_SENT
  NOTICE_REMINDER_SENT
}

model User {
  id             String    @id @default(cuid())
  name           String?
  surname        String?
  email          String    @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  personalNumber String?   @unique
  role           Role      @default(USER)
  createdAt      DateTime  @default(now()) @map("created_at")

  accounts     Account[]
  sessions     Session[]
  onboardings  EmployeeOnboarding[]
  offboardings EmployeeOffboarding[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model EmployeeOnboarding {
  id              Int              @id @default(autoincrement())
  userId          String?
  user            User?            @relation(fields: [userId], references: [id])
  status          OnboardingStatus @default(NEW)
  plannedStart    DateTime
  actualStart     DateTime?
  startTime       String?          @default("08:00")
  titleBefore     String?
  name            String
  surname         String
  titleAfter      String?
  email           String?
  phone           String?
  userName        String?
  userEmail       String?
  positionNum     String
  positionName    String
  department      String
  unitName        String
  personalNumber  String?          @map("evidenceNumber")
  itStatus        String?
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  deletedBy       String?
  deleteReason    String?
  isManager       Boolean          @default(false)
  probationMonths Int?             @default(3)
  probationEnd    DateTime?

  lastProbationReminder  DateTime?
  probationRemindersSent Int       @default(0)

  OnboardingChangeLog OnboardingChangeLog[]
  EmailHistory        EmailHistory[]

  @@index([plannedStart])
  @@index([actualStart])
  @@index([deletedAt])
  @@index([probationEnd])
}

model EmployeeOffboarding {
  id             Int               @id @default(autoincrement())
  userId         String?
  user           User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  status         OffboardingStatus @default(NEW)
  plannedEnd     DateTime
  actualEnd      DateTime?
  titleBefore    String?
  name           String
  surname        String
  titleAfter     String?
  userName       String?
  userEmail      String?
  phone          String?
  positionNum    String
  positionName   String
  department     String
  unitName       String
  personalNumber String?           @map("evidenceNumber")
  itStatus       String?
  notes          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  deletedAt      DateTime?
  deletedBy      String?
  deleteReason   String?
  noticeMonths   Int?              @default(2)
  noticeEnd      DateTime?
  hasCustomDates Boolean           @default(false)

  lastNoticeReminder  DateTime?
  noticeRemindersSent Int       @default(0)

  OffboardingChangeLog OffboardingChangeLog[]
  EmailHistory         EmailHistory[]

  @@index([plannedEnd])
  @@index([actualEnd])
  @@index([deletedAt])
  @@index([noticeEnd])
}

model OnboardingChangeLog {
  id         Int                @id @default(autoincrement())
  employee   EmployeeOnboarding @relation(fields: [employeeId], references: [id])
  employeeId Int
  userId     String
  action     ActionType
  field      String
  oldValue   String?
  newValue   String?
  createdAt  DateTime           @default(now())
  ipAddress  String?
  userAgent  String?

  @@index([employeeId, createdAt])
  @@index([action])
}

model OffboardingChangeLog {
  id         Int                 @id @default(autoincrement())
  employee   EmployeeOffboarding @relation(fields: [employeeId], references: [id])
  employeeId Int
  userId     String
  action     ActionType
  field      String
  oldValue   String?
  newValue   String?
  createdAt  DateTime            @default(now())
  ipAddress  String?
  userAgent  String?

  @@index([employeeId, createdAt])
  @@index([action])
}

model EmailHistory {
  id          Int        @id @default(autoincrement())
  mailQueueId Int?
  mailQueue   MailQueue? @relation(fields: [mailQueueId], references: [id])

  onboardingEmployeeId  Int?
  onboardingEmployee    EmployeeOnboarding?  @relation(fields: [onboardingEmployeeId], references: [id])
  offboardingEmployeeId Int?
  offboardingEmployee   EmployeeOffboarding? @relation(fields: [offboardingEmployeeId], references: [id])

  emailType  MailJobType
  recipients Json
  subject    String
  content    String?       @db.Text
  status     MailJobStatus
  sentAt     DateTime?
  error      String?       @db.Text
  createdBy  String
  createdAt  DateTime      @default(now())

  @@index([emailType])
  @@index([status])
  @@index([sentAt])
  @@index([onboardingEmployeeId])
  @@index([offboardingEmployeeId])
}

model MailQueue {
  id         Int           @id @default(autoincrement())
  type       MailJobType
  payload    Json
  sendAt     DateTime?     @default(now())
  status     MailJobStatus @default(QUEUED)
  error      String?       @db.Text
  createdAt  DateTime      @default(now())
  sentAt     DateTime?
  createdBy  String?
  priority   Int           @default(5)
  retryCount Int           @default(0)
  maxRetries Int           @default(3)

  EmailHistory EmailHistory[]

  @@index([status, sendAt])
  @@index([type])
  @@index([priority])
  @@map("mail_jobs")
}

model MonthlyReportRecord {
  id              Int            @id @default(autoincrement())
  monthlyReportId Int?
  monthlyReport   MonthlyReport? @relation(fields: [monthlyReportId], references: [id])

  recordType String
  recordId   Int
  sentAt     DateTime @default(now())
  sentBy     String

  @@unique([recordType, recordId, monthlyReportId])
  @@index([monthlyReportId])
  @@index([sentAt])
}

model MonthlyReport {
  id          Int       @id @default(autoincrement())
  month       String
  reportType  String
  recipients  Json
  generatedBy String
  sentAt      DateTime?
  createdAt   DateTime  @default(now())
  data        Json

  records MonthlyReportRecord[]

  @@unique([month, reportType])
  @@index([month])
  @@index([sentAt])
}

model SystemSettings {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     Json
  updatedAt DateTime @updatedAt
  updatedBy String

  @@index([key])
}
